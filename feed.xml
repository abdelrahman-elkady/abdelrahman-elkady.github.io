<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abdelrahman Elkady</title>
  <subtitle></subtitle>
  <link href="https://abdelrahman-elkady.tech/feed.xml" rel="self"/>
  <link href="https://abdelrahman-elkady.tech/"/>
  
    <updated>2015-11-22T00:00:00Z</updated>
  
  <id>https://abdelrahman-elkady.tech</id>
  <author>
    <name>Abdelrahman Elkady</name>
    <email>elkadyabdelrahman@gmail.com</email>
  </author>
  
    
    <entry>
      <title>What is .. this ?</title>
      <link href="https://abdelrahman-elkady.tech/posts/2015-07-09-what-is-this/"/>
      <updated>2015-09-07T00:00:00Z</updated>
      <id>https://abdelrahman-elkady.tech/posts/2015-07-09-what-is-this/</id>
      <content type="html">
        <![CDATA[
      <p>He asked me about that word again, he was happy learning and advancing in his <strong>Java</strong> programming course .. he told me that<br>
he started to reach OOP and the concepts behind it as he said:</p>
<blockquote>
<p>Ok, I think I am getting to grasp the concepts of OOP now,<br>
I think I am fully understanding what is a class and why we use classes,<br>
and how to create instances from these classes .. But I can't get what is the use of <strong>this</strong> keyword actually</p>
</blockquote>
<p>That brought me years ago when I was watching an online course and got hit by <code>this</code> , days later I was in OOP lecture<br>
where the professor explained the same keyword <code>this</code> , I felt that I got more info but I thought that this thing is very complicated<br>
, so thought my colleagues !</p>
<p>As many programmers I don't always remember when did I learn specific topics, but I think I know more about OOP now, and I keep receiving the<br>
same question about <code>this</code> again and again from fellow colleagues and fresh guys learning programming, Every time I got asked this question I answer it, I am answering it but with different way of explanation each time, I feel I am missing something while explaining.</p>
<p>Lately I noticed a problem happening each time I explain <code>this</code> to someone, people are getting to learn about objects<br>
and it's design, but rarely someone get the concept of instance creation and how <strong>Java</strong> deals with <strong>references</strong> .</p>
<p>Here I am trying to get into that point of <code>Object</code> creation in Java, let's try to explain this using cookies !</p>
<pre class="language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cookie</span> <span class="token punctuation">{</span><br><br>  <span class="token keyword">int</span> radius<span class="token punctuation">;</span><br>  <span class="token keyword">boolean</span> baked<span class="token punctuation">;</span><br><br>  <span class="token keyword">public</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">boolean</span> baked<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><br>    <span class="token keyword">this</span><span class="token punctuation">.</span>baked <span class="token operator">=</span> baked<span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>    <span class="token class-name">Cookie</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token class-name">Cookie</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>  <span class="token punctuation">}</span><br><br><span class="token punctuation">}</span></code></pre>
<p>In the previous example we just created a <code>Cookie</code> class and created two instances <code>c1</code> , <code>c2</code> from it, <strong>Java</strong> just allocated space for those 2 instances in memory and stored a <strong>reference</strong> of that instance location in the variables <code>c1</code> and <code>c2</code> respectively, that means Java doesn't store whole Objects in variables, it just stores a <strong>reference</strong> of that instance .</p>
<p>Referring to <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#toString()"><code>toString()</code></a> default implementation it states that the returned value of the method is :</p>
<p><code>getClass().getName() + '@' + Integer.toHexString(hashCode())</code></p>
<p>We can use <code>hashCode()</code> in this example, but in general it could be overridden, so we will use the more generic way to get a unique identifier of instances by using <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/System.html#identityHashCode(java.lang.Object)"><code>System.identityHashCode(Object)</code></a> :</p>
<pre class="language-java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>That should print something like this to the console, which means we can check the reference of the Objects</p>
<pre class="language-bash"><code class="language-bash"><span class="token operator">></span> 2a139a55<br><span class="token operator">></span> 15db9742</code></pre>
<p>Now, Let's have some normal changes to our instances, changing their attributes' values</p>
<pre class="language-java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">2</span>a139a55<br><span class="token operator">></span> <span class="token number">15d</span>b9742<br><br>c1<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">120</span> <span class="token punctuation">;</span><br>c2<span class="token punctuation">.</span>baked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">2</span>a139a55<br><span class="token operator">></span> <span class="token number">15d</span>b9742</code></pre>
<p>Ok, Nice changing the values and modifying the instance doesn't change the reference saved in the variable, and that makes sense, it still points to the same location in memory, and when we change some value it gets to that location, modifies the values we want and then return back, the memory location is still the same for later modifications/readings, let's try to change the location that the variable is pointing to, for example let's assign the address stored in c2 to c1</p>
<pre class="language-java"><code class="language-java">c1 <span class="token operator">=</span> c2<span class="token punctuation">;</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">15d</span>b9742<br><span class="token operator">></span> <span class="token number">15d</span>b9742</code></pre>
<p>This clearly indicates the references thing, now the two variables are pointing to the same location in memory and they read the same values and if we modify any attribute it will modify the same data</p>
<p>Let's go and try to modify our <code>Cookie</code> class implementation a bit, by adding a statement to print <code>this</code> hashCode into it's constructor :</p>
<pre class="language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span><span class="token keyword">boolean</span> baked<span class="token punctuation">)</span> <span class="token punctuation">{</span><br>  <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><br>  <span class="token keyword">this</span><span class="token punctuation">.</span>baked <span class="token operator">=</span> baked<span class="token punctuation">;</span><br>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>and in our main method let's create new instances again :</p>
<pre class="language-java"><code class="language-java">c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">2</span>a139a55<br><span class="token operator">></span> <span class="token number">15d</span>b9742<br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">2</span>a139a55<br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">15d</span>b9742</code></pre>
<p>That's pretty interesting, as you can see <code>this</code> is pointing to the same memory location of the instance that is using the constructor right now, we can push it to more interesting stuff, like returning <code>this</code> from a method, let's make this last modification on our <code>Cookie</code> class</p>
<pre class="language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Cookie</span> <span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><br>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>as you compile this it works !, that's because of <code>this</code> is carrying the reference of the instance that calls this method, let's test this in our main method</p>
<pre class="language-java"><code class="language-java"><span class="token class-name">Cookie</span> thisCookie <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>thisCookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br><br><span class="token operator">></span> <span class="token number">2</span>a139a55<br><span class="token operator">></span> <span class="token number">2</span>a139a55</code></pre>
<p>that's why <code>this</code> is pretty useful to get a reference to the calling instance in your class, allowing you to modify and manipulate the instance in runtime based on your class definitions and methods .</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Setting up android development environment on Ubuntu</title>
      <link href="https://abdelrahman-elkady.tech/posts/setting-up-android-development-environment-on-ubuntu/"/>
      <updated>2015-11-22T00:00:00Z</updated>
      <id>https://abdelrahman-elkady.tech/posts/setting-up-android-development-environment-on-ubuntu/</id>
      <content type="html">
        <![CDATA[
      <p>This is a simple walk-through that will guide you to a convenient and easy steps to setup your Android development environment on your Ubuntu machine.</p>
<h3>Requirements:</h3>
<ul>
<li>Minimum of 2 Gb of RAM</li>
<li>JDK 1.7+ you can install JDK 1.8 with <code>apt</code> using <a href="http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html">webupd8's repository</a>
<blockquote>
<p>Note that android studio uses <strong>JDK 1.7</strong>, using a higher version will work but you will be limited to the features that are in 1.7 only in your development</p>
</blockquote>
</li>
<li>Install build essentials to manage c,c++ dependencies to install it run<pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential</code></pre>
</li>
</ul>
<p>Now you are ready to start setting up your development environment, first we need to start with Downloading Android Studio, go and <a href="http://developer.android.com/sdk/index.html">download</a> the latest version .</p>
<p>After Downloading the archive you need to extract it somewhere, it's up to you where to extract the folder, but it's a <a href="http://askubuntu.com/questions/1148/what-is-the-best-place-to-install-user-apps">good practice</a> to install user programs in <code>/opt/</code> or <code>/usr/local</code> on Linux machines, for me I choose <code>/opt/</code> to move the extracted directory to</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /your/installation/path<br>$ <span class="token function">sudo</span> <span class="token function">mv</span> android-studio /opt/</code></pre>
<p>If you are running a 64-bit machine Install <code>lib32ncurses5-dev</code> and <code>lib32stdc++6</code> packages as it's required for building your apps, you can install it by running the following commands :</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32ncurses5-dev<br>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32stdc++6<br>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32z1</code></pre>
<p>Navigate to location that you have the extracted directory and run <code>bin/studio.sh</code> executable to run android studio</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> path/of/extracted/android-studio/bin<br>$ ./studio.sh</code></pre>
<p>For instance you will need to install at least one of the system images to be able to run your virtual device (If you are going to use the emulator), If you don't have a specific requirements you can install the latest <strong>stable</strong> version, you can also install an old version (Like Android 4.0.3) to test your backward compatibility.</p>
<p><img src="/images/sdk-platforms.png" alt="system-images"><br>
<em>API images</em></p>
<blockquote>
<p>Tip: If you are going to use the emulator you are advised to enable hardware acceleration which will be shown later, if your device supports hardware acceleration please install the intel x86 images after enabling <code>show packages details</code> <img src="/images/x86-image.png" alt="x86-images"></p>
</blockquote>
<p>Choose the sdk-tools tab and install the following packages in the SDK tools, those are important for building your app and supporting backward compatibility with support classes<br>
<img src="/images/sdk-tools.png" alt="sdk-tools"></p>
<p>Now if you are managing to work with the emulator and your machine is capable of running hardware acceleration you should go for it, it will increase the performance of your emulated device and you will be <strong>happy!</strong> , <a href="http://developer.android.com/tools/devices/emulator.html#accel-vm">here</a> you can find how to manage kvm on Linux in order to enable hardware acceleration, in general you can check whether your machine is supporting hardware acceleration using this commands</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cpu-checker<br>$ kvm-ok</code></pre>
<p>You should get a response like :</p>
<pre class="language-bash"><code class="language-bash">$ INFO: /dev/kvm exists<br><br>$ KVM acceleration can be used</code></pre>
<p>If your machine supports acceleration you can follow <a href="https://help.ubuntu.com/community/KVM/Installation">this guideline</a> to install KVM on your machine</p>
<p>Create a new project now, use the default settings, let gradle download it's dependencies and build the project <em>this could take a while in the first run</em> create the AVD or connect your device in debugging mode and try to run the app on your machine (If you are enabling hardware acceleration please check <a href="http://developer.android.com/tools/devices/emulator.html#accel-vm">this</a> in order to create your AVD correctly )</p>
<p>You can now create a desktop entry in order to run Android studio from your launcher directly later without the need to execute <a href="http://studio.sh">studio.sh</a> again<br>
<img src="/images/desktop-entry.png" alt="desktop-entry"><br>
<em>Desktop entry creation</em></p>
<p>That's it, you have completed setting up the basics for your android development journey, happy coding and hacking</p>

    ]]>
      </content>
    </entry>
  
</feed>